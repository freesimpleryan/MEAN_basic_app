var mongoose = require('mongoose'),
	crypto = require('crypto'),
	Schema = mongoose.Schema;
	
var UserSchema = new Schema({
	
	firstName:String,
	lastName:String,
	email:{
		type:String,
		match: [/.+\@.+\..+/, "Please fill out a valid email address"]
	},
	username:{
		type:String,
		trim:true,
		unique:true,
		required: 'Username is required'
	},
	password:{
		type:String,
		validate:[
			function(password){
				return password.length >= 6;			
			},
			'Password must be at least 6 characters'		
		]	
	},
	salt:{
		type:String	
	},
	provider:{
		type:String,
		required: 'Provider is required'	
	},
	providerId:String,
	providerData:{},
	created:{
		type:Date,
		default: Date.now	
	}
});

UserSchema.virtual('fullName').get(function(){
	return this.firstName + ' ' + this.lastName;
}).set(function(fullName){
		var splitName = fullName.split(' ');
		this.firstName = splitName[0] || ' ';
		this.lastName = splitName[1] || ' ';
});

UserSchema.pre('save', function(next){
	if(this.password){
		this.salt = new Buffer(crypto.randomBytes(16).toString('base64'), 'base64');
		this.password = this.hashPassword(this.password);	
	}
	
	next();

});

UserSchema.methods.hashPassword = function(password){
	return crypto.pbkdf2Sync(password, this.salt, 10000, 64).toString('base64');
};

UserSchema.methods.authenticate = function(password){
	return this.password === this.hashPassword(password);
};

UserSchema.statics.findOneByUsername = function(username, callback){
	this.findOne({username: new RegExp(username, 'i')}, callback);
};

UserSchema.post('save', function(next){
	if(this.isNew){
		console.log('New user successfully created');	
	}
	else{
		console.log('User updated details');	
	}
});

UserSchema.set('toJson', {getters:true, virtuals:true});

mongoose.model('User',UserSchema);
